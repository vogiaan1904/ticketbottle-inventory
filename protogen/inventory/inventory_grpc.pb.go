// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: inventory.proto

package inventory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_CreateTicketClass_FullMethodName   = "/event.InventoryService/CreateTicketClass"
	InventoryService_UpdateTicketClass_FullMethodName   = "/event.InventoryService/UpdateTicketClass"
	InventoryService_FindOneTicketClass_FullMethodName  = "/event.InventoryService/FindOneTicketClass"
	InventoryService_FindManyTicketClass_FullMethodName = "/event.InventoryService/FindManyTicketClass"
	InventoryService_DeleteTicketClass_FullMethodName   = "/event.InventoryService/DeleteTicketClass"
	InventoryService_CheckAvailability_FullMethodName   = "/event.InventoryService/CheckAvailability"
	InventoryService_GetAvailability_FullMethodName     = "/event.InventoryService/GetAvailability"
	InventoryService_Reserve_FullMethodName             = "/event.InventoryService/Reserve"
	InventoryService_Confirm_FullMethodName             = "/event.InventoryService/Confirm"
	InventoryService_Release_FullMethodName             = "/event.InventoryService/Release"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	CreateTicketClass(ctx context.Context, in *CreateTicketClassRequest, opts ...grpc.CallOption) (*CreateTicketClassResponse, error)
	UpdateTicketClass(ctx context.Context, in *UpdateTicketClassRequest, opts ...grpc.CallOption) (*UpdateTicketClassResponse, error)
	FindOneTicketClass(ctx context.Context, in *FindOneTicketClassRequest, opts ...grpc.CallOption) (*FindOneTicketClassResponse, error)
	FindManyTicketClass(ctx context.Context, in *FindManyTicketClassRequest, opts ...grpc.CallOption) (*FindManyTicketClassResponse, error)
	DeleteTicketClass(ctx context.Context, in *DeleteTicketClassRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckAvailability(ctx context.Context, in *CheckAvailabilityRequest, opts ...grpc.CallOption) (*CheckAvailabilityResponse, error)
	GetAvailability(ctx context.Context, in *GetAvailabilityRequest, opts ...grpc.CallOption) (*GetAvailabilityResponse, error)
	Reserve(ctx context.Context, in *ReserveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Confirm(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) CreateTicketClass(ctx context.Context, in *CreateTicketClassRequest, opts ...grpc.CallOption) (*CreateTicketClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTicketClassResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateTicketClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateTicketClass(ctx context.Context, in *UpdateTicketClassRequest, opts ...grpc.CallOption) (*UpdateTicketClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTicketClassResponse)
	err := c.cc.Invoke(ctx, InventoryService_UpdateTicketClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) FindOneTicketClass(ctx context.Context, in *FindOneTicketClassRequest, opts ...grpc.CallOption) (*FindOneTicketClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindOneTicketClassResponse)
	err := c.cc.Invoke(ctx, InventoryService_FindOneTicketClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) FindManyTicketClass(ctx context.Context, in *FindManyTicketClassRequest, opts ...grpc.CallOption) (*FindManyTicketClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindManyTicketClassResponse)
	err := c.cc.Invoke(ctx, InventoryService_FindManyTicketClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteTicketClass(ctx context.Context, in *DeleteTicketClassRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_DeleteTicketClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CheckAvailability(ctx context.Context, in *CheckAvailabilityRequest, opts ...grpc.CallOption) (*CheckAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAvailabilityResponse)
	err := c.cc.Invoke(ctx, InventoryService_CheckAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetAvailability(ctx context.Context, in *GetAvailabilityRequest, opts ...grpc.CallOption) (*GetAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailabilityResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) Reserve(ctx context.Context, in *ReserveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_Reserve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) Confirm(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_Confirm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InventoryService_Release_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility.
type InventoryServiceServer interface {
	CreateTicketClass(context.Context, *CreateTicketClassRequest) (*CreateTicketClassResponse, error)
	UpdateTicketClass(context.Context, *UpdateTicketClassRequest) (*UpdateTicketClassResponse, error)
	FindOneTicketClass(context.Context, *FindOneTicketClassRequest) (*FindOneTicketClassResponse, error)
	FindManyTicketClass(context.Context, *FindManyTicketClassRequest) (*FindManyTicketClassResponse, error)
	DeleteTicketClass(context.Context, *DeleteTicketClassRequest) (*emptypb.Empty, error)
	CheckAvailability(context.Context, *CheckAvailabilityRequest) (*CheckAvailabilityResponse, error)
	GetAvailability(context.Context, *GetAvailabilityRequest) (*GetAvailabilityResponse, error)
	Reserve(context.Context, *ReserveRequest) (*emptypb.Empty, error)
	Confirm(context.Context, *ConfirmRequest) (*emptypb.Empty, error)
	Release(context.Context, *ReleaseRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) CreateTicketClass(context.Context, *CreateTicketClassRequest) (*CreateTicketClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicketClass not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateTicketClass(context.Context, *UpdateTicketClassRequest) (*UpdateTicketClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicketClass not implemented")
}
func (UnimplementedInventoryServiceServer) FindOneTicketClass(context.Context, *FindOneTicketClassRequest) (*FindOneTicketClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneTicketClass not implemented")
}
func (UnimplementedInventoryServiceServer) FindManyTicketClass(context.Context, *FindManyTicketClassRequest) (*FindManyTicketClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindManyTicketClass not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteTicketClass(context.Context, *DeleteTicketClassRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicketClass not implemented")
}
func (UnimplementedInventoryServiceServer) CheckAvailability(context.Context, *CheckAvailabilityRequest) (*CheckAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvailability not implemented")
}
func (UnimplementedInventoryServiceServer) GetAvailability(context.Context, *GetAvailabilityRequest) (*GetAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailability not implemented")
}
func (UnimplementedInventoryServiceServer) Reserve(context.Context, *ReserveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reserve not implemented")
}
func (UnimplementedInventoryServiceServer) Confirm(context.Context, *ConfirmRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
}
func (UnimplementedInventoryServiceServer) Release(context.Context, *ReleaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_CreateTicketClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateTicketClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateTicketClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateTicketClass(ctx, req.(*CreateTicketClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateTicketClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateTicketClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateTicketClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateTicketClass(ctx, req.(*UpdateTicketClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_FindOneTicketClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneTicketClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).FindOneTicketClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_FindOneTicketClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).FindOneTicketClass(ctx, req.(*FindOneTicketClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_FindManyTicketClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindManyTicketClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).FindManyTicketClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_FindManyTicketClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).FindManyTicketClass(ctx, req.(*FindManyTicketClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteTicketClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteTicketClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_DeleteTicketClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteTicketClass(ctx, req.(*DeleteTicketClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CheckAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CheckAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CheckAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CheckAvailability(ctx, req.(*CheckAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetAvailability(ctx, req.(*GetAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_Reserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Reserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_Reserve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Reserve(ctx, req.(*ReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_Confirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Confirm(ctx, req.(*ConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_Release_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Release(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicketClass",
			Handler:    _InventoryService_CreateTicketClass_Handler,
		},
		{
			MethodName: "UpdateTicketClass",
			Handler:    _InventoryService_UpdateTicketClass_Handler,
		},
		{
			MethodName: "FindOneTicketClass",
			Handler:    _InventoryService_FindOneTicketClass_Handler,
		},
		{
			MethodName: "FindManyTicketClass",
			Handler:    _InventoryService_FindManyTicketClass_Handler,
		},
		{
			MethodName: "DeleteTicketClass",
			Handler:    _InventoryService_DeleteTicketClass_Handler,
		},
		{
			MethodName: "CheckAvailability",
			Handler:    _InventoryService_CheckAvailability_Handler,
		},
		{
			MethodName: "GetAvailability",
			Handler:    _InventoryService_GetAvailability_Handler,
		},
		{
			MethodName: "Reserve",
			Handler:    _InventoryService_Reserve_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _InventoryService_Confirm_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _InventoryService_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory.proto",
}
